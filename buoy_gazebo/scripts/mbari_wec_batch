#!/usr/bin/python3
# Copyright 2022 Open Source Robotics Foundation, Inc. and Monterey Bay Aquarium Research Institute
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Launch batch of buoy simulations."""

from em import invoke as empy
import numpy as np
import yaml

import os
import sys
import time

from ament_index_python.packages import get_package_share_directory

from launch import LaunchDescription
from launch import LaunchService
from launch.actions import ExecuteProcess, IncludeLaunchDescription
from launch.launch_description_sources import PythonLaunchDescriptionSource

import rclpy
from rclpy.node import Node


PHYSICS_MAX_STEP_SIZE = 0.001

def generate_simulations(sim_params_yaml):

    rclpy.init()
    node = Node('mbari_wec_batch')

    with open(sim_params_yaml, 'r') as fd:
        sim_params = yaml.load(fd, Loader=yaml.CLoader)

    try:
        duration = float(sim_params['duration'])
    except TypeError as err:
        node.get_logger().error('sim_params_yaml: duration parameter ' +
                                'must be a single value in seconds')
        sys.exit(-1)
    iterations = int(round(duration / PHYSICS_MAX_STEP_SIZE))
    door_state = sim_params['door_state']
    scale_factor = np.array(sim_params['scale_factor'], dtype=float)
    batch_params = list(zip(*[param.ravel() for param in np.meshgrid(door_state,
                                                                     scale_factor)]))

    node.get_logger().info(f'Generated {len(batch_params)} simulation runs:')
    node.get_logger().info('Duration, Door State, Scale Factor')
    [node.get_logger().info(f'{duration}, {ds}, {sf}') for ds, sf in batch_params]

    timestr = time.strftime("%Y%m%d%H%M%S")
    with open(f'batch_runs_{timestr}.log', 'w') as fd:
        fd.write(f'# Generated {len(batch_params)} simulation runs\n')
        fd.write(f'Run Index, Start Time, Duration, Door State, Scale Factor\n')

    pkg_buoy_gazebo = get_package_share_directory('buoy_gazebo')
    pkg_buoy_description = get_package_share_directory('buoy_description')

    model_dir = 'mbari_wec_base'
    empy_base_sdf_file = os.path.join(pkg_buoy_description, 'models', model_dir, 'model.sdf.em')
    base_sdf_file = os.path.join(pkg_buoy_description, 'models', model_dir, 'model.sdf')

    model_dir = 'mbari_wec'
    empy_sdf_file = os.path.join(pkg_buoy_description, 'models', model_dir, 'model.sdf.em')
    sdf_file = os.path.join(pkg_buoy_description, 'models', model_dir, 'model.sdf')

    for idx, (ds, sf) in enumerate(batch_params):
        node.get_logger().info(f"\n\nSim run [{idx}] for {duration} seconds: " +
                               f"door state='{ds}', scale factor={sf}\n\n")
        empy(['-D', f"door_state = '{ds}'",
              '-o', base_sdf_file,
              empy_base_sdf_file])

        empy(['-D', f"scale_factor = {sf}",
              '-o', sdf_file,
              empy_sdf_file])

        def generate_launch_description():
            mbari_wec = IncludeLaunchDescription(
                PythonLaunchDescriptionSource(
                    os.path.join(pkg_buoy_gazebo, 'launch', 'mbari_wec.launch.py'),
                ),
                launch_arguments={'gz_args': f'-rs --iterations {iterations}'}.items(),
            )

            rosbag2_name = f'rosbag2_batch_sim_{idx}'
            rosbag2 = ExecuteProcess(
                cmd=['ros2', 'bag', 'record', '-o', rosbag2_name, '-a'],
                output='screen'
            )

            idxtimestr = time.strftime("%Y%m%d%H%M%S")
            with open(f'batch_runs_{timestr}.log', 'a') as fd:
                fd.write(f'{idx}, {idxtimestr}, {duration}, {ds}, {sf}\n')

            return LaunchDescription([
                rosbag2,
                mbari_wec
            ])

        ls = LaunchService()
        ls.include_launch_description(generate_launch_description())
        result = ls.run()
        if result:
            node.get_logger().error(f'Simulation run [{idx}] was not successful: ' +
                                    f'return code [{result}]')

if __name__=='__main__':
    import argparse
    parser = argparse.ArgumentParser(description='Batch running for buoy_sim')
    parser.add_argument('sim_params_yaml',
                        help='yaml file with batch parameters')
    args, unknown = parser.parse_known_args()
    generate_simulations(args.sim_params_yaml)
