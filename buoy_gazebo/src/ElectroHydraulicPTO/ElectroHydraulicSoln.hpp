// Copyright 2022 Open Source Robotics Foundation, Inc. and Monterey Bay Aquarium Research Institute
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#ifndef ELECTROHYDRAULICPTO__ELECTROHYDRAULICSOLN_HPP_
#define ELECTROHYDRAULICPTO__ELECTROHYDRAULICSOLN_HPP_

#include <stdio.h>

#include <unsupported/Eigen/NonLinearOptimization>

#include <splinter_ros/splinter1d.hpp>
#include <splinter_ros/splinter2d.hpp>

#include <algorithm>
#include <cmath>
#include <iostream>
#include <memory>
#include <string>
#include <vector>

#include "ElectroHydraulicState.hpp"
#include "WindingCurrentTarget.hpp"


/////////////////////////////////////////////////////
// Generic functor
template<typename _Scalar, int NX = Eigen::Dynamic, int NY = Eigen::Dynamic>
struct Functor
{
  typedef _Scalar Scalar;
  enum
  {
    InputsAtCompileTime = NX,
    ValuesAtCompileTime = NY
  };
  typedef Eigen::Matrix<Scalar, InputsAtCompileTime, 1> InputType;
  typedef Eigen::Matrix<Scalar, ValuesAtCompileTime, 1> ValueType;
  typedef Eigen::Matrix<Scalar, ValuesAtCompileTime, InputsAtCompileTime> JacobianType;

  const int m_inputs, m_values;

  Functor()
  : m_inputs(InputsAtCompileTime), m_values(ValuesAtCompileTime)
  {
  }
  Functor(int inputs, int values)
  : m_inputs(inputs), m_values(values)
  {
  }

  int inputs() const {return m_inputs;}
  int values() const {return m_values;}

  // you should define that in the subclass :
  // void operator() (const InputType& x, ValueType* v, JacobianType* _j=0) const;
};


struct ElectroHydraulicSoln : Functor<double>
{
public:
  splinter_ros::Splinter2d hyd_eff_v, hyd_eff_m;
  splinter_ros::Splinter1d reliefValve;

  // Class that computes Target Winding Current based on RPM, Scale Factor, limits, etc..
  mutable WindingCurrentTarget I_Wind;
  double Q;
  /// \brief Pump/Motor Displacement per Revolution
  double HydMotorDisp;

private:
  static const std::vector<double> Prelief;
  static const std::vector<double> Qrelief;

  static const std::vector<double> Peff;  // psi
  static const std::vector<double> Neff;  // rpm

  static const std::vector<std::vector<double>> eff_v;  // volumetric efficiency
  static const std::vector<std::vector<double>> eff_m;  // mechanical efficiency

public:
  ElectroHydraulicSoln()
  : Functor<double>(2, 2),
    // Set HydraulicMotor Volumetric & Mechanical Efficiency
    hyd_eff_v(Neff, Peff, eff_v),
    hyd_eff_m(Neff, Peff, eff_m),
    // Set pressure vs flow for relief valve
    reliefValve(Prelief, Qrelief)
  {
  }

  // x[0] = RPM
  // x[1] = Pressure (psi)
  int operator()(const Eigen::VectorXd & x, Eigen::VectorXd & fvec) const
  {
    const int n = x.size();
    assert(fvec.size() == n);

    const double rpm = std::min(fabs(x[0U]), Neff.back());
    const double pressure = std::min(fabs(x[1U]), Peff.back());

    const double eff_m = this->hyd_eff_m.eval(rpm, pressure);
    const double eff_v = this->hyd_eff_v.eval(rpm, pressure);

    // 1.375 fudge factor required to match experiments, not yet sure why.
    const double T_applied = 1.375 * this->I_Wind.TorqueConstantInLbPerAmp * this->I_Wind(x[0U]);

    static constexpr double Pset = 2900.0;
    double QQ = this->Q;
    if (x[1U] > Pset) {  // Extending
      QQ += (x[1U] - Pset) * (50.0 / 600.0) * 231.0 / 60.0;  // TODO(hamilton) magic numbers
    }
    // QQ += this->reliefValve.eval(pressure);

    fvec[0U] = x[0U] - eff_v * 60.0 * QQ / this->HydMotorDisp;
    fvec[1U] = x[1U] - eff_m * T_applied / (this->HydMotorDisp / (2.0 * M_PI));

    return 0;
  }
};

const std::vector<double> ElectroHydraulicSoln::Prelief{0.0, 2800.0, 3000.0};
const std::vector<double> ElectroHydraulicSoln::Qrelief{1.0, 1.0, 0.0};

const std::vector<double> ElectroHydraulicSoln::Peff
{0.0, 145.0, 290.0, 435.0, 580.0, 725.0,
  870.0, 1015.0, 1160.0, 1305.0, 1450.0,
  1595.0, 1740.0, 1885.0, 2030.0, 2175.0,
  2320.0, 2465.0, 2610.0, 2755.0, 2900.0};

const std::vector<double> ElectroHydraulicSoln::Neff
{0.0, 100.0, 200.0, 300.0, 400.0, 500.0, 600.0, 700.0, 800.0, 900.0, 1000.0, 1500.0,
  2000.0, 2500.0, 3000.0, 3500.0, 4000.0, 4500.0, 5000.0, 5500.0, 6000.0, 15000.0};

const std::vector<std::vector<double>> ElectroHydraulicSoln::eff_v
{
  {0.5000, 0.9700, 0.9800, 0.9800, 0.9800, 0.9800, 0.9800, 0.9800, 0.9800, 0.9800, 0.9900, 0.9900,
    0.9900, 0.9900, 0.9900, 0.9900, 0.9900, 0.9900, 0.9900, 0.9900, 0.9900, 0.9900},
  {0.5000, 0.9700, 0.9800, 0.9800, 0.9800, 0.9800, 0.9800, 0.9800, 0.9800, 0.9800, 0.9900, 0.9900,
    0.9900, 0.9900, 0.9900, 0.9900, 0.9900, 0.9900, 0.9900, 0.9900, 0.9900, 0.9900},
  {0.5000, 0.9525, 0.9700, 0.9750, 0.9750, 0.9775, 0.9775, 0.9775, 0.9800, 0.9800, 0.9875, 0.9800,
    0.9900, 0.9900, 0.9900, 0.9900, 0.9900, 0.9900, 0.9900, 0.9900, 0.9900, 0.9900},
  {0.5000, 0.9350, 0.9600, 0.9700, 0.9700, 0.9750, 0.9750, 0.9750, 0.9800, 0.9800, 0.9850, 0.9800,
    0.9800, 0.9800, 0.9900, 0.9900, 0.9900, 0.9900, 0.9900, 0.9900, 0.9900, 0.9900},
  {0.5000, 0.9175, 0.9500, 0.9650, 0.9650, 0.9725, 0.9725, 0.9725, 0.9800, 0.9800, 0.9825, 0.9800,
    0.9800, 0.9800, 0.9800, 0.9800, 0.9900, 0.9900, 0.9900, 0.9900, 0.9900, 0.9900},
  {0.5000, 0.9000, 0.9400, 0.9600, 0.9600, 0.9700, 0.9700, 0.9700, 0.9800, 0.9800, 0.9800, 0.9800,
    0.9800, 0.9800, 0.9800, 0.9800, 0.9800, 0.9800, 0.9900, 0.9900, 0.9900, 0.9900},
  {0.5000, 0.8860, 0.9320, 0.9540, 0.9560, 0.9660, 0.9680, 0.9680, 0.9760, 0.9780, 0.9780, 0.9800,
    0.9800, 0.9800, 0.9800, 0.9800, 0.9800, 0.9800, 0.9800, 0.9800, 0.9900, 0.9800},
  {0.5000, 0.8720, 0.9240, 0.9480, 0.9520, 0.9620, 0.9660, 0.9660, 0.9720, 0.9760, 0.9760, 0.9800,
    0.9800, 0.9800, 0.9800, 0.9800, 0.9800, 0.9800, 0.9800, 0.9800, 0.9800, 0.9800},
  {0.5000, 0.8580, 0.9160, 0.9420, 0.9480, 0.9580, 0.9640, 0.9640, 0.9680, 0.9740, 0.9740, 0.9800,
    0.9800, 0.9800, 0.9800, 0.9800, 0.9800, 0.9800, 0.9800, 0.9800, 0.9800, 0.9800},
  {0.5000, 0.8440, 0.9080, 0.9360, 0.9440, 0.9540, 0.9620, 0.9620, 0.9640, 0.9720, 0.9720, 0.9800,
    0.9800, 0.9800, 0.9800, 0.9800, 0.9800, 0.9800, 0.9800, 0.9800, 0.9800, 0.9800},
  {0.5000, 0.8300, 0.9000, 0.9300, 0.9400, 0.9500, 0.9600, 0.9600, 0.9600, 0.9700, 0.9700, 0.9700,
    0.9800, 0.9800, 0.9800, 0.9800, 0.9800, 0.9800, 0.9800, 0.9800, 0.9800, 0.9800},
  {0.5000, 0.8180, 0.8940, 0.9240, 0.9360, 0.9460, 0.9560, 0.9580, 0.9580, 0.9680, 0.9680, 0.9680,
    0.9760, 0.9760, 0.9760, 0.9760, 0.9760, 0.9760, 0.9760, 0.9760, 0.9760, 0.9760},
  {0.5000, 0.8060, 0.8880, 0.9180, 0.9320, 0.9420, 0.9520, 0.9560, 0.9560, 0.9660, 0.9660, 0.9660,
    0.9720, 0.9720, 0.9720, 0.9720, 0.9720, 0.9720, 0.9720, 0.9720, 0.9720, 0.9720},
  {0.5000, 0.7940, 0.8820, 0.9120, 0.9280, 0.9380, 0.9480, 0.9540, 0.9540, 0.9640, 0.9640, 0.9640,
    0.9680, 0.9680, 0.9680, 0.9680, 0.9680, 0.9680, 0.9680, 0.9680, 0.9680, 0.9680},
  {0.5000, 0.7820, 0.8760, 0.9060, 0.9240, 0.9340, 0.9440, 0.9520, 0.9520, 0.9620, 0.9620, 0.9620,
    0.9640, 0.9640, 0.9640, 0.9640, 0.9640, 0.9640, 0.9640, 0.9640, 0.9640, 0.9640},
  {0.5000, 0.7700, 0.8700, 0.9000, 0.9200, 0.9300, 0.9400, 0.9500, 0.9500, 0.9600, 0.9600, 0.9600,
    0.9600, 0.9600, 0.9600, 0.9600, 0.9600, 0.9600, 0.9600, 0.9600, 0.9600, 0.9600},
  {0.5000, 0.7600, 0.8620, 0.8960, 0.9160, 0.9280, 0.9380, 0.9480, 0.9480, 0.9580, 0.9580, 0.9580,
    0.9580, 0.9580, 0.9580, 0.9580, 0.9580, 0.9580, 0.9580, 0.9580, 0.9580, 0.9580},
  {0.5000, 0.7500, 0.8540, 0.8920, 0.9120, 0.9260, 0.9360, 0.9460, 0.9460, 0.9560, 0.9560, 0.9560,
    0.9560, 0.9560, 0.9560, 0.9560, 0.9560, 0.9560, 0.9560, 0.9560, 0.9560, 0.9560},
  {0.5000, 0.7400, 0.8460, 0.8880, 0.9080, 0.9240, 0.9340, 0.9440, 0.9440, 0.9540, 0.9540, 0.9540,
    0.9540, 0.9540, 0.9540, 0.9540, 0.9540, 0.9540, 0.9540, 0.9540, 0.9540, 0.9540},
  {0.5000, 0.7300, 0.8380, 0.8840, 0.9040, 0.9220, 0.9320, 0.9420, 0.9420, 0.9520, 0.9520, 0.9520,
    0.9520, 0.9520, 0.9520, 0.9520, 0.9520, 0.9520, 0.9520, 0.9520, 0.9520, 0.9520},
  {0.5000, 0.7200, 0.8300, 0.8800, 0.9000, 0.9200, 0.9300, 0.9400, 0.9400, 0.9500, 0.9500, 0.9500,
    0.9500, 0.9500, 0.9500, 0.9500, 0.9500, 0.9500, 0.9500, 0.9500, 0.9500, 0.9500}
};

const std::vector<std::vector<double>> ElectroHydraulicSoln::eff_m
{
  {0.1000, 0.1000, 0.1000, 0.1000, 0.1000, 0.1000, 0.1000, 0.1000, 0.1000, 0.1000, 0.1000, 0.1000,
    0.1000, 0.1000, 0.1000, 0.1000, 0.1000, 0.1000, 0.1000, 0.1000, 0.1000, 0.1000},
  {0.6000, 0.6000, 0.6100, 0.6200, 0.6300, 0.6400, 0.6500, 0.6500, 0.6600, 0.6600, 0.6700, 0.7900,
    0.7900, 0.7800, 0.7700, 0.7400, 0.7100, 0.6800, 0.6400, 0.6000, 0.5500, 0.1500},
  {0.6800, 0.6800, 0.6900, 0.6975, 0.7050, 0.7125, 0.7200, 0.7200, 0.7275, 0.7275, 0.7350, 0.8400,
    0.8400, 0.8400, 0.8200, 0.8100, 0.7800, 0.7600, 0.7300, 0.7000, 0.6600, 0.3500},
  {0.7600, 0.7600, 0.7700, 0.7750, 0.7800, 0.7850, 0.7900, 0.7900, 0.7950, 0.7950, 0.8000, 0.8900,
    0.8900, 0.8900, 0.8800, 0.8700, 0.8500, 0.8400, 0.8200, 0.8000, 0.7700, 0.5500},
  {0.8400, 0.8400, 0.8500, 0.8525, 0.8550, 0.8575, 0.8600, 0.8600, 0.8625, 0.8625, 0.8650, 0.9200,
    0.9200, 0.9200, 0.9100, 0.9000, 0.8900, 0.8800, 0.8600, 0.8400, 0.8300, 0.7000},
  {0.9200, 0.9200, 0.9300, 0.9300, 0.9300, 0.9300, 0.9300, 0.9300, 0.9300, 0.9300, 0.9300, 0.9400,
    0.9400, 0.9300, 0.9300, 0.9200, 0.9100, 0.9000, 0.8900, 0.8700, 0.8600, 0.8000},
  {0.9280, 0.9280, 0.9360, 0.9380, 0.9380, 0.9380, 0.9380, 0.9380, 0.9380, 0.9380, 0.9380, 0.9500,
    0.9500, 0.9400, 0.9400, 0.9300, 0.9200, 0.9200, 0.9100, 0.8900, 0.8800, 0.8200},
  {0.9360, 0.9360, 0.9420, 0.9460, 0.9460, 0.9460, 0.9460, 0.9460, 0.9460, 0.9460, 0.9460, 0.9500,
    0.9500, 0.9500, 0.9500, 0.9400, 0.9300, 0.9300, 0.9200, 0.9100, 0.9000, 0.8400},
  {0.9440, 0.9440, 0.9480, 0.9540, 0.9540, 0.9540, 0.9540, 0.9540, 0.9540, 0.9540, 0.9540, 0.9600,
    0.9600, 0.9600, 0.9500, 0.9500, 0.9400, 0.9400, 0.9300, 0.9200, 0.9100, 0.8500},
  {0.9520, 0.9520, 0.9540, 0.9620, 0.9620, 0.9620, 0.9620, 0.9620, 0.9620, 0.9620, 0.9620, 0.9600,
    0.9600, 0.9600, 0.9600, 0.9500, 0.9500, 0.9400, 0.9300, 0.9300, 0.9200, 0.8600},
  {0.9600, 0.9600, 0.9600, 0.9700, 0.9700, 0.9700, 0.9700, 0.9700, 0.9700, 0.9700, 0.9700, 0.9700,
    0.9700, 0.9700, 0.9600, 0.9600, 0.9500, 0.9500, 0.9400, 0.9300, 0.9300, 0.8800},
  {0.9640, 0.9640, 0.9640, 0.9720, 0.9720, 0.9720, 0.9720, 0.9720, 0.9720, 0.9720, 0.9720, 0.9700,
    0.9700, 0.9700, 0.9600, 0.9600, 0.9500, 0.9500, 0.9400, 0.9300, 0.9300, 0.8820},
  {0.9680, 0.9680, 0.9680, 0.9740, 0.9740, 0.9740, 0.9740, 0.9740, 0.9740, 0.9740, 0.9740, 0.9700,
    0.9700, 0.9700, 0.9600, 0.9600, 0.9500, 0.9500, 0.9400, 0.9300, 0.9300, 0.8840},
  {0.9720, 0.9720, 0.9720, 0.9760, 0.9760, 0.9760, 0.9760, 0.9760, 0.9760, 0.9760, 0.9760, 0.9700,
    0.9700, 0.9700, 0.9600, 0.9600, 0.9500, 0.9500, 0.9400, 0.9300, 0.9300, 0.8860},
  {0.9760, 0.9760, 0.9760, 0.9780, 0.9780, 0.9780, 0.9780, 0.9780, 0.9780, 0.9780, 0.9780, 0.9700,
    0.9700, 0.9700, 0.9600, 0.9600, 0.9500, 0.9500, 0.9400, 0.9300, 0.9300, 0.8880},
  {0.9800, 0.9800, 0.9800, 0.9800, 0.9800, 0.9800, 0.9800, 0.9800, 0.9800, 0.9800, 0.9800, 0.9700,
    0.9700, 0.9700, 0.9600, 0.9600, 0.9500, 0.9500, 0.9400, 0.9300, 0.9300, 0.8900},
  {0.9800, 0.9800, 0.9800, 0.9800, 0.9800, 0.9800, 0.9800, 0.9800, 0.9800, 0.9800, 0.9800, 0.9700,
    0.9700, 0.9700, 0.9600, 0.9600, 0.9500, 0.9500, 0.9400, 0.9300, 0.9300, 0.8920},
  {0.9800, 0.9800, 0.9800, 0.9800, 0.9800, 0.9800, 0.9800, 0.9800, 0.9800, 0.9800, 0.9800, 0.9700,
    0.9700, 0.9700, 0.9600, 0.9600, 0.9500, 0.9500, 0.9400, 0.9300, 0.9300, 0.8940},
  {0.9800, 0.9800, 0.9800, 0.9800, 0.9800, 0.9800, 0.9800, 0.9800, 0.9800, 0.9800, 0.9800, 0.9700,
    0.9700, 0.9700, 0.9600, 0.9600, 0.9500, 0.9500, 0.9400, 0.9300, 0.9300, 0.8960},
  {0.9800, 0.9800, 0.9800, 0.9800, 0.9800, 0.9800, 0.9800, 0.9800, 0.9800, 0.9800, 0.9800, 0.9700,
    0.9700, 0.9700, 0.9600, 0.9600, 0.9500, 0.9500, 0.9400, 0.9300, 0.9300, 0.8980},
  {0.9800, 0.9800, 0.9800, 0.9800, 0.9800, 0.9800, 0.9800, 0.9800, 0.9800, 0.9800, 0.9800, 0.9700,
    0.9700, 0.9700, 0.9600, 0.9600, 0.9500, 0.9500, 0.9400, 0.9300, 0.9300, 0.9000}
};

#endif  // ELECTROHYDRAULICPTO__ELECTROHYDRAULICSOLN_HPP_
